server:
  port: 4004

spring:
  data:
    redis:
      # take REDIS_HOST as precedence from env variable or take redis as fallback
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
  cloud:
    gateway:
      routes:
        ## http://localhost:4004/auth/login
        ## API GATEWAY -> http://auth-service:4005/login
        - id : auth-service-route
          uri : http://auth-service:4005
          predicates:
            - Path=/auth/**
          filters:
            - StripPrefix=1

        ## REST CLIENT -> http://localhost:4004/api/patients
        ## API GATEWAY -> http://patient-service:4000/patients
        ## PATIENT SERVICE(SPRING BOOT APP) -> /patients ->Patients Array
        ## (JWTValidation)GatewayFilterFactory helps intercept tokens for all requests to patient service
        - id : patient-service-route
          uri : http://patient-service:4000
          predicates :
            - Path=/api/patients/**
          filters :
          - StripPrefix=1
          - JwtValidation

        #REST CLIENT -> http://localhost:4004/api-docs/patients
        #API GATEWAY -> http://patient-service:4000/v3/api-docs
        - id : api-docs-patient-route
          uri: http://patient-service:4000
          predicates:
            - Path=/api-docs/patients
          filters:
            - RewritePath=/api-docs/patients,/v3/api-docs

        - id : api-docs-auth-service
          uri : http://auth-service:4005
          predicates:
            - Path=/api-docs/auth
          filters:
            - RewritePath=/api-docs/auth,/v3/api-docs
      default-filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.burstCapacity: 5  # user can make 5 request
            redis-rate-limiter.replenishRate: 5  # one new request will replenish every 200 millisecs or after one sec 5 request are available again
            key-resolver: "#{@ipKeyResolver}"